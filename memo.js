// ----------------------------------- 1일차 ----------------------------------- //
/**
 * TypeScript 설치: npm install -g typescript
 * TypeScript 독립적 설치: npm i --save-dev typescript
 * TypeScript 버전: tsc -v
 * TypeScript 컴파일: tsc 파일명.ts
 * TypeScript 설정 파일 생성: tsc --init
 */

/** TypeScript 개요
 * TypeScript는 Microsoft에서 개발 및 유지 관리하는 오픈 소스 언어
 * 큰 스케일의 애플리케이션 개발을 위해 설계된 언어
 * Javascript에 정적 타이핑과 선택적 타입 annotation 추가
 */

/** TypeScript 특징
 * - 크로스 플랫폼: TypeScript는 JavaScript가 실행되는 모든 플랫폼에서 실행된다.
 * - 객체 지향 언어: TypeScript는 클래스, 인터페이스, 모듈과 같은 강력한 객체 지향 프로그래밍 기능을 제공한다.
 * - 정적 타입 검사: TypeScript는 정적 타이핑을 사용하며, 이는 annotation(타입 주석)을 통해 수행된다.
 * 이를 통해 컴파일 시에 타입 검사가 가능하므로, 스크립트를 매번 실행하지 않고도 코드 작성 중에 오류를 찾기 쉽다.
 * - 타입 추론: 변수가 타입 없이 선언되면, 그 값에 기반하여 타입을 추론하는 기능을 제공한다.
 * - 선택적 정적 타이핑: TypeScript의 정적 타입은 선택적이다.
 * - DOM 조작: JavaScript처럼 TypeScript도 DOM을 조작하는 데 사용할 수 있다.
 * - ES6 기능 포함: TypeScript는 클래스, 인터페이스, 화살표 함수 등 예정된 ECMAScript 2015의 대부분 기능을 포함하고 있다.
 */

/** JS/TS 차이점
 * 타입 시스템(JavaScript): 동적 타입, 변수의 타입은 런타임에 결정됨
 * 타입 시스템(TypeScript): 정적 타입, 변수의 타입은 컴파일 시점에 결정됨
 *
 * 타입 안정성(JavaScript): 타입 오류가 런타임에 발생할 수 있음(낮은 타입 안정성)
 * 타입 안정성(TypeScript): 타입 오류는 대부분 컴파일 시점에 발견됨(높은 타입 안정성)
 *
 * 컴파일(JavaScript): 인터프리터 언어로 소스 코드가 런타임에 해석됨
 * 컴파일(TypeScript): 컴파일 언어로 TypeScript 코드는 JavaScript로 컴파일되어 실행
 *
 * 학습 곡선(JavaScript): 비교적 쉬움
 * 학습 곡선(TypeScript): JavaScript에 비해 다소 어려움. 타입 시스템과 추가 문법을 학습 해야 한다.
 *
 * 인터페이스와 제네릭(JavaScript): 지원하지 않음
 * 인터페이스와 제네릭(TypeScript): 지원함
 *
 * 호환성(JavaScript): 모든 브라우저와 환경에서 기본적으로 지원됨
 * 호환성(TypeScript): JavaScript로 컴파일되어야 브라우저와 환경에서 실행될 수 있음.
 */

/** 타입 시스템(Type System)
 * 타입 시스템은 데이터의 종류를 구분하는 분류 체계를 뜻한다.
 * 이 시스템은 데이터가 메모리에 어떻게 저장되고, 어떻게 처리되어야 하는지에 대한 규칙을 정의한다.
 * 타입 시스템의 가장 큰 목적은 프로그램의 안정성과 신뢰성을 높이는 것
 *
 * - 핵심 개념1: 타입 안정성(type safety)
 * 프로그램이 예상치 못한 방식으로 데이터를 해석하는 오류를 미리 방지 하는 것을 의미
 * 예) 문자열과 숫자를 혼동하여 연산하는 것과 같은 실수를 막아준다.
 *
 * - 핵심 개념2: 타입 추론(type inference)
 * 명시적으로 타입을 지정하지 않아도 컴파일러가 자동으로 데이터의 타입을 결정하는 프로세스
 * 코드의 간결성(가독성)을 높이면서도 타입의 안정성을 유지할 수 있게 해준다.
 *
 * - 핵심 개념3: 정적 vs 동적 타입(static vs dynamic)
 * 정적 타입: 컴파일 시에 타입이 결정되며 런타임에는 변경되지 않는다.
 * 동적 타입: 런타임에 타입이 결정된다. 동적 타입 언어는 더 유연하다.
 *
 * - 핵심 개념4: 제네릭(generics)
 * 타입 매개변수를 (예 <T>) 사용하여 다양한 타입에 대해 동작할 수 있는 코드를 작성할 수 있게 해준다.
 * 코드의 재사용성을 높이고 타입 안정성을 보장한다.
 */

/** Type Annotation(타입 주석)
 * 타입스크립트 문법으로 변수, 함수, 객체 등에 명시적으로 타입을 지정하는 방법을 말한다.
 * 컴파일러는 이 정보를 바탕으로 타입 검사를 수행한다.
 */

/** TypeScript의 기본 타입
 * string
 * number
 * boolean
 * null
 * any
 * 등등...
 */
